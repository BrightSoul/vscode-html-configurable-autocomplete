{
	"name": "html-configurable-autocomplete",
	"displayName": "HTML Configurable Autocomplete",
	"description": "Autocomplete your HTML content and navigate to definitions by providing simple matching rules",
	"version": "1.2.0",
	"publisher": "BrightSoul",
	"icon": "icon.png",
	"author": {
		"name": "Moreno Gentili",
		"email": "brightsoul@tiscali.it"
	},
	"galleryBanner": {
		"color": "#cacaa6",
		"theme": "light"
	},
	"markdown": "github",
	"repository": {
		"type": "git",
		"url": "https://github.com/BrightSoul/vscode-html-configurable-autocomplete.git"
	},
	"bugs": {
		"url": "https://github.com/BrightSoul/vscode-html-configurable-autocomplete.git"
	},
	"engines": {
		"vscode": "^1.47.0"
	},
	"categories": [
		"Other"
	],
	"keywords": [
		"autocomplete",
		"configurable",
		"html",
		"frameworkless",
		"custom"
	],
	"activationEvents": [
		"onLanguage:html",
		"onLanguage:javascript"
	],
	"license": "MIT",
	"main": "./extension.js",
	"contributes": {
		"configuration": {
			"title": "HtmlConfigurableAutocomplete",
			"properties": {
				"htmlConfigurableAutocomplete.enable": {
					"type": "boolean",
					"default": true,
					"description": "Enables the estension. Optional, default is true."
				},
				"htmlConfigurableAutocomplete.debug": {
					"type": "boolean",
					"default": false,
					"description": "Set to true for a more verbose logging."
				},
				"htmlConfigurableAutocomplete.completionItemProviders": {
					"type": "array",
					"default": [],
					"description": "Configuration ruleset for completion item providers",
					"items": {
						"type": "object",
						"title": "Configuration rule for a completion item provider",
						"properties": {
							"enable": {
								"type": "boolean",
								"default": true,
								"description": "Enable/disable this matching rule. Optional, defaults to true."
							},
							"triggerCharacters": {
								"type": "array",
								"description": "An array of one or more characters which will activate completion. Required."
							},
							"triggerRegexp": {
								"type": "string",
								"description": "A filtering regexp activating item completion only when the cursor is inside one of its matches. Optional."
							},
							"triggerTransformer": {
								"type": "string",
								"default": "",
								"enum": [
									"",
									"html-hierarchy"
								],
								"description": "This transformer will transform the current editor content before triggerRegexp is executed. Optional."
							},
							"maxFiles": {
								"type": "number",
								"default": 50,
								"description": "Maximum number of files to scan for completion items. Optional, defaults to 50."
							},
							"maxItems": {
								"type": "number",
								"default": 50,
								"description": "Maximum number of completion items provided. Optional, defaults to 50."
							},
							"maxItemsPerFile": {
								"type": "number",
								"default": 50,
								"description": "Maximum number of completion items provided by each file. Optional, defaults to 50."
							},
							"itemKind": {
								"type": "string",
								"default": "Field",
								"enum": [
									"Class",
									"Color",
									"Constant",
									"Constructor",
									"Enum",
									"EnumMember",
									"Event",
									"Field",
									"File",
									"Folder",
									"Function",
									"Interface",
									"Issue",
									"Keyword",
									"Method",
									"Module",
									"Operator",
									"Property",
									"Reference",
									"Snippet",
									"Struct",
									"Text",
									"TypeParameter",
									"Unit",
									"User",
									"Value",
									"Variable"
								],
								"description": "The item kind affects which icon will be displayed beside the completion item. Optional, defaults to 'Field'."
							},
							"includeGlobPattern": {
								"type": "string",
								"default": "",
								"description": "All files matching this glob pattern will be scanned for completion items. This pattern is relative to the workspace folder. Optional, no files will be scanned by default. If you set it, you must also set contentRegexp. Supports placeholders ${dirName}, ${dirPath}, ${filePath}, ${fileName}, ${fileNameWithoutExtension} and (if you configured a definition provider) ${definitionDirName}, ${definitionDirPath}, ${definitionFilePath}, ${definitionFileName}, ${definitionFileNameWithoutExtension}."
							},
							"excludeGlobPattern": {
								"type": "string",
								"default": "",
								"description": "All files matching this glob pattern will be excluded from the scanning of completion items. This pattern is relative to the workspace folder. Supports placeholders ${dirName}, ${dirPath}, ${filePath}, ${fileName}, ${fileNameWithoutExtension} and (if you configured a definition provider) ${definitionDirName}, ${definitionDirPath}, ${definitionFilePath}, ${definitionFileName}, ${definitionFileNameWithoutExtension}. Optional, no files are excluded by default."
							},
							"contentTransformer": {
								"type": "string",
								"default": "",
								"enum": [
									"",
									"es6-module-nodes"
								],
								"description": "This transformer will transform file content before the contentRegexp is executed. Optional. Default is no transformer."
							},
							"contentRegexp": {
								"type": "string",
								"default": "",
								"description": "A regexp used to extract completion items from content. The first capture group will be used, if present, otherwise the whole match is used. Required."
							},
							"completionItemTransformer": {
								"type": "string",
								"default": "",
								"enum": [
									"",
									"camelcase-to-kebabcase"
								],
								"description": "This transformer will transform the contentRegexp matched text. The transformed text will be displayed as the completion item to the user. Optional. Default is no transformer."
							},
							"staticItems": {
								"type": "array",
								"default": [],
								"description": "A list of statically provided completion items. Optional, defaults to an empty array."
							}
						}
					}
				},
				"htmlConfigurableAutocomplete.definitionProviders": {
					"type": "array",
					"default": [],
					"description": "Configuration ruleset for definition providers",
					"items": {
						"type": "object",
						"title": "Configuration rule for a definition provider",
						"properties": {
							"enable": {
								"type": "boolean",
								"default": "true",
								"description": "Enable/disable this matching rule. Optional, defaults to true."
							},
							"definitionTransformer": {
								"type": "string",
								"default": "",
								"enum": [
									"",
									"kebabcase-to-camelcase"
								],
								"description": "This transformer will transform the definitionRegexp matched text. Optional. Default is no transformer."
							},
							"definitionRegexp": {
								"type": "string",
								"description": "A regexp used to detect whether the cursor is on a definition. The first capture group, if present, will be used as the name of the definition otherwise the whole match is used. Required."
							},
							"includeGlobPattern": {
								"type": "string",
								"description": "All files matching this glob pattern will be scanned for definitions. Required. Supports variables ${dirName}, ${dirPath}, ${filePath}, ${fileName}, ${fileNameWithoutExtension}."
							},
							"excludeGlobPattern": {
								"type": "string",
								"default": "",
								"description": "All files matching this glob pattern will be excluded from the scanning of definitions. Optional, defaults to '' (no files excluded). Supports variables ${dirName}, ${dirPath}, ${filePath}, ${fileName}, ${fileNameWithoutExtension}."
							},
							"contentTransformer": {
								"type": "string",
								"default": "",
								"enum": [
									"",
									"es6-module-nodes"
								],
								"description": "This transformer will transform file content before the contentRegexp is executed. Optional. Default is no transformer."
							},
							"contentRegexp": {
								"type": "string",
								"description": "A regexp used to extract a definition name from content. The first capture group is used, if present, otherwise the whole match is used. If it's equal to the definitionRegexp match, then that location will open. Required."
							}
						}
					}
				},
				"htmlConfigurableAutocomplete.referenceProviders": {
					"type": "array",
					"default": [],
					"description": "Configuration ruleset for reference providers",
					"items": {
						"type": "object",
						"title": "Configuration rule for a reference provider",
						"properties": {
							"enable": {
								"type": "boolean",
								"default": true,
								"description": "Enable/disable this matching rule. Optional, defaults to true."
							},
							"referenceRegexp": {
								"type": "string",
								"description": "A regexp used to detect whether the cursor is on a name used to find references. The first capture group, if present, will be used as the name to find references otherwise the whole match is used. Required."
							},
							"includeGlobPattern": {
								"type": "string",
								"description": "All files matching this glob pattern will be scanned for references. Required. Supports placeholders ${dirName}, ${dirPath}, ${filePath}, ${fileName}, ${fileNameWithoutExtension}."
							},
							"excludeGlobPattern": {
								"type": "string",
								"default": "",
								"description": "All files matching this glob pattern will be excluded from the scanning of definitions. Supports placeholders ${dirName}, ${dirPath}, ${filePath}, ${fileName}, ${fileNameWithoutExtension}. Optional, defaults to '' (no files excluded)."
							},
							"contentRegexp": {
								"type": "string",
								"description": "A regexp used to extract a reference from content. The first capture group is used, if present, otherwise the whole match is used. If it's equal to the referenceRegexp match, then that location will be suggested as a reference. Required."
							},
							"maxFiles": {
								"type": "number",
								"default": 50,
								"description": "Maximum number of files to scan for references. Optional, defaults to 50."
							},
							"maxReferences": {
								"type": "number",
								"default": 50,
								"description": "Maximum number of references provided. Optional, defaults to 50."
							},
							"maxReferencesPerFile": {
								"type": "number",
								"default": 50,
								"description": "Maximum number of references provided by each file. Optional, defaults to 50."
							}
						}
					}
				}
			}
		}
	},
	"scripts": {
		"lint": "eslint .",
		"test": "jest"
	},
	"devDependencies": {
		"@types/glob": "^7.1.1",
		"@types/jest": "^26.0.7",
		"@types/node": "^13.11.0",
		"@types/vscode": "^1.47.0",
		"eslint": "^6.8.0",
		"glob": "^7.1.6",
		"jest": "^26.4.0",
		"typescript": "^3.8.3"
	},
	"standard": {
		"parser": "babel-eslint"
	},
	"dependencies": {
		"@babel/types": "^7.11.0",
		"babel-eslint": "^10.1.0",
		"htmlparser2": "^4.1.0"
	}
}
